import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import random

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∫–ª—é—á–∏)
from config import (
    TOKEN,
    OPENWEATHER_API_KEY,
    NEWS_API_KEY,
    NASA_API_KEY,
    THE_CAT_API_KEY
)

bot = Bot(token=TOKEN)
dp = Dispatcher()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class WeatherState(StatesGroup):
    waiting_for_city = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞"), KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏")],
        [KeyboardButton(text="üê± –§–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö"), KeyboardButton(text="ü™ê –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)


# ========== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API ==========

# 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async def get_weather(city: str):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()

    if data.get("cod") != 200:
        return None

    weather = {
        "city": data["name"],
        "temp": round(data["main"]["temp"]),
        "feels_like": round(data["main"]["feels_like"]),
        "description": data["weather"][0]["description"].capitalize(),
        "humidity": data["main"]["humidity"],
        "wind": data["wind"]["speed"]
    }
    return weather


# 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
async def get_news(topic="technology"):
    url = f"https://newsapi.org/v2/top-headlines?category={topic}&apiKey={NEWS_API_KEY}&pageSize=5"
    response = requests.get(url)
    data = response.json()

    if data["status"] != "ok" or not data["articles"]:
        return None

    articles = []
    for article in data["articles"]:
        articles.append({
            "title": article["title"],
            "url": article["url"],
            "source": article["source"]["name"]
        })
    return articles


# 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –æ –∫–æ—à–∫–∞—Ö
async def get_cat_fact():
    url = "https://catfact.ninja/fact"
    response = requests.get(url)
    data = response.json()
    return data.get("fact")


# 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ç–æ –¥–Ω—è –æ—Ç NASA
async def get_nasa_apod(random_date=False):
    if random_date:
        end_date = datetime.now()
        start_date = end_date - timedelta(days=365 * 5)  # 5 –ª–µ—Ç –Ω–∞–∑–∞–¥
        random_date = start_date + (end_date - start_date) * random.random()
        date_str = random_date.strftime("%Y-%m-%d")
        url = f'https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}&date={date_str}'
    else:
        url = f'https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}'

    response = requests.get(url)
    data = response.json()

    if "url" not in data:
        return None

    return {
        "url": data["url"],
        "title": data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
        "explanation": data.get("explanation", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"),
        "date": data.get("date", "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
    }


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ==========

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
        reply_markup=main_keyboard
    )


@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/weather <–≥–æ—Ä–æ–¥> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/news - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n"
        "/cat - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö\n"
        "/space - –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ –¥–Ω—è\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
        reply_markup=main_keyboard
    )


@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_button(message: types.Message):
    await help_command(message)


@dp.message(Command("weather"))
@dp.message(lambda message: message.text == "üå§ –ü–æ–≥–æ–¥–∞")
async def weather_handler(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /weather —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    if message.text.startswith("/weather"):
        city = message.text.replace("/weather", "").strip()
        if not city:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather <–≥–æ—Ä–æ–¥>")
            return

        weather = await get_weather(city)
        if not weather:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
            return

        response = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {weather['city']}:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather['feels_like']}¬∞C)\n"
            f"üìù {weather['description']}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å"
        )
        await message.answer(response)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        await state.set_state(WeatherState.waiting_for_city)


@dp.message(WeatherState.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    city = message.text
    weather = await get_weather(city)

    if not weather:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        await state.clear()
        return

    response = (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {weather['city']}:\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather['feels_like']}¬∞C)\n"
        f"üìù {weather['description']}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
        f"üå¨ –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å"
    )
    await message.answer(response, reply_markup=main_keyboard)
    await state.clear()


@dp.message(Command("news"))
@dp.message(lambda message: message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def news_handler(message: types.Message):
    await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")

    news = await get_news()
    if not news:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:\n\n"
    for i, article in enumerate(news, 1):
        response += f"{i}. {article['title']}\n{article['url']}\n\n"

    await message.answer(response[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è


@dp.message(Command("cat"))
@dp.message(lambda message: message.text == "üê± –§–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö")
async def cat_handler(message: types.Message):
    fact = await get_cat_fact()
    if not fact:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.answer(f"üê± –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö:\n\n{fact}")


@dp.message(Command("space"))
@dp.message(lambda message: message.text == "ü™ê –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ")
async def space_handler(message: types.Message):
    await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ...")

    apod = await get_nasa_apod(random_date=True)
    if not apod:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    caption = (
        f"ü™ê {apod['title']}\n"
        f"üìÖ {apod['date']}\n\n"
        f"{apod['explanation'][:1000]}..."  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    )

    try:
        if apod['url'].endswith(('.jpg', '.jpeg', '.png')):
            await message.answer_photo(apod['url'], caption=caption)
        else:  # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ (YouTube)
            await message.answer(f"{apod['title']}\n\n{caption}\n\n–°—Å—ã–ª–∫–∞: {apod['url']}")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ. –í–æ—Ç —Å—Å—ã–ª–∫–∞: {apod['url']}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help", reply_markup=main_keyboard)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
